<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Raio = 0;
Raio_to = 64;
Drag = 0;
DeviceDrag = 0;

FixPos = 0;
Fix_x = 0;
Fix_y = 0;

Pontos = 0;
Acertos = 0;
Erros = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Raio += (Raio_to-Raio)/10;

if os_type==os_android {
    var i, pc;
    for (i=0; i&lt;5; i++) {
        pc = point_in_circle(device_mouse_x_to_gui(i),device_mouse_y_to_gui(i),x,y,Raio);
        if device_mouse_check_button_pressed(i,mb_left)&amp;&amp;pc {Drag = 1; DeviceDrag = i};
    }
} else if os_type==os_windows {
    var i=id, key=keyboard_key, pc=point_in_circle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),x,y,Raio);
    if pc {
        if mouse_check_button_pressed(mb_left) {Drag = 1; DeviceDrag = 0};
        var key = "";
        if keyboard_check_pressed(ord("A")) key="A"
        else if keyboard_check_pressed(ord("B")) key="B"
        else if keyboard_check_pressed(ord("C")) key="C"
        else if keyboard_check_pressed(ord("D")) key="D";
        
        if key!="" {
            with(obj_quiz_alternativa) {
                if Nome==key {
                    with(obj_quiz_alternativa) Selecionado[i.N] = 0;
                    Selecionado[i.N]=1;
                    SelecionadoId[i.N]=i;
                    PlaySom(sound1,0,VSom,0);
                }
            }
        } else if keyboard_check_pressed(vk_space) {
            with(obj_quiz_alternativainicial) {
                Selecionado[i.N]=1;
                SelecionadoId[i.N]=i;
                PlaySom(sound1,0,VSom,0);
            }
        }
    }
}

if Drag {
    Raio_to = DW/20;
    x = device_mouse_x_to_gui(DeviceDrag);
    y = device_mouse_y_to_gui(DeviceDrag);
    Drag = device_mouse_check_button(DeviceDrag,mb_left);
    depth = -11;
} else {
    Raio_to = DW/40;
    if FixPos {
        x += (Fix_x-x)/10;
        y += (Fix_y-y)/10;
    }
    depth = -10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_simbols,N,x,y,Raio/32,Raio/32,image_angle,image_blend,image_alpha);
draw_text(x,y+Raio-16,Nome);

var ww = DW-64;
var par = N mod 2;
if Nothers&gt;1 ww = DW/2-32;
var x1 = 16+DW/2*(par);
var y1 = 24*ceil((N+1)/2)-16;
var x2 = x1+ww;
var y2 = 24*ceil((N+1)/2)+20-16;
var pw = (x2-x1)/Bar_repeat;

draw_set_alpha(1);
draw_set_colour(c_gray);
draw_roundrect_ext(x1,y1,x2,y2,16,16,0);

draw_set_colour(merge_colour(image_blend,c_black,.4));
draw_roundrect_ext(x1,y1,x1+pw+pw*Pontos,y2,16,16,0);

draw_set_colour(image_blend);
draw_roundrect(x1+16,y1+3,x1+pw+pw*Pontos-16,y1+8,0);

draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
